import dash
from dash import dcc, html, Input, Output
import plotly.graph_objects as go
import plotly.figure_factory as ff

app = dash.Dash(__name__)

# Datos de los modelos seleccionados
model_data = {
    "Random Forest": {
        "accuracy": 0.85,
        "precision_rain": 0.77,
        "recall_rain": 0.45,
        "false_alarms": 1279,
        "missed_rain": 5216,
        "conf_matrix": [[31854, 1279], [5216, 4309]],
        "color": "#4CAF50"  # Verde
    },
    "√Årbol de Decisi√≥n": {
        "accuracy": 0.79,
        "precision_rain": 0.52,
        "recall_rain": 0.77,
        "false_alarms": 5608,
        "missed_rain": 1850,
        "conf_matrix": [[21972, 5608], [1850, 6119]],
        "color": "#FF9800"  # Naranja
    }
}

app.layout = html.Div(style={'fontFamily': 'Arial, sans-serif', 'padding': '20px'}, children=[
    html.H1("Comparaci√≥n de Modelos Predictivos de Lluvia", style={'textAlign': 'center', 'color': '#333'}),
    
    html.Div(style={'backgroundColor': '#f8f9fa', 'padding': '20px', 'borderRadius': '10px', 'marginBottom': '20px'}, children=[
        html.H3("¬øPor qu√© estos dos modelos?", style={'color': '#333'}),
        html.P("Hemos seleccionado los dos modelos que mejor se complementan para predecir lluvia:"),
        html.Ul([
            html.Li("üå≥ √Årbol de Decisi√≥n: Detecta mejor los d√≠as de lluvia reales (menos d√≠as de lluvia pasan desapercibidos)"),
            html.Li("üå≤ Random Forest: Es m√°s preciso en general y tiene menos falsas alarmas"),
            html.Li("üí° Juntos ofrecen un panorama m√°s completo para la toma de decisiones")
        ])
    ]),
    
    html.Div(style={'display': 'flex', 'flexWrap': 'wrap', 'gap': '20px', 'marginBottom': '30px'}, children=[
        html.Div(style={'flex': '1', 'minWidth': '300px'}, children=[
            html.H3("Efectividad General", style={'textAlign': 'center'}),
            dcc.Graph(
                figure=go.Figure(
                    data=[
                        go.Bar(
                            name=model_name,
                            x=['Exactitud', 'Precisi√≥n (Lluvia)', 'Detecci√≥n (Lluvia)'],
                            y=[data['accuracy'], data['precision_rain'], data['recall_rain']],
                            marker_color=data['color']
                        ) for model_name, data in model_data.items()
                    ],
                    layout=go.Layout(
                        barmode='group',
                        plot_bgcolor='white',
                        yaxis={'tickformat': ',.0%', 'range': [0, 1]}
                    )
                )
            )
        ]),
        
        html.Div(style={'flex': '1', 'minWidth': '300px'}, children=[
            html.H3("Errores Importantes", style={'textAlign': 'center'}),
            dcc.Graph(
                figure=go.Figure(
                    data=[
                        go.Bar(
                            name=model_name,
                            x=['Falsas Alarmas', 'Lluvias No Detectadas'],
                            y=[data['false_alarms'], data['missed_rain']],
                            marker_color=data['color']
                        ) for model_name, data in model_data.items()
                    ],
                    layout=go.Layout(
                        barmode='group',
                        plot_bgcolor='white'
                    )
                )
            )
        ])
    ]),
    
    html.Div(style={'marginBottom': '30px'}, children=[
        html.H3("¬øC√≥mo interpretar estos resultados?", style={'color': '#333'}),
        html.Div(style={'display': 'flex', 'flexWrap': 'wrap', 'gap': '20px'}, children=[
            html.Div(style={'flex': '1', 'minWidth': '300px', 'backgroundColor': '#e8f5e9', 'padding': '15px', 'borderRadius': '8px'}, children=[
                html.H4("Cuando usar Random Forest", style={'color': '#2E7D32'}),
                html.Ul([
                    html.Li("‚úÖ Para alertas p√∫blicas donde las falsas alarmas son costosas"),
                    html.Li("‚úÖ Cuando la precisi√≥n general es m√°s importante"),
                    html.Li("üîç Ejemplo: Planificaci√≥n de eventos al aire libre")
                ])
            ]),
            html.Div(style={'flex': '1', 'minWidth': '300px', 'backgroundColor': '#fff3e0', 'padding': '15px', 'borderRadius': '8px'}, children=[
                html.H4("Cuando usar √Årbol de Decisi√≥n", style={'color': '#E65100'}),
                html.Ul([
                    html.Li("‚úÖ Para sistemas de alerta temprana de lluvias"),
                    html.Li("‚úÖ Cuando es crucial no pasar por alto d√≠as de lluvia"),
                    html.Li("üîç Ejemplo: Agricultura o prevenci√≥n de inundaciones")
                ])
            ])
        ])
    ]),
    
    html.Div(style={'marginBottom': '20px'}, children=[
        html.H3("Visualizaci√≥n de Aciertos y Errores", style={'textAlign': 'center'}),
        dcc.Tabs(id='model-tabs', value='Random Forest', children=[
            dcc.Tab(label='Random Forest', value='Random Forest', style={'fontWeight': 'bold'}),
            dcc.Tab(label='√Årbol de Decisi√≥n', value='√Årbol de Decisi√≥n', style={'fontWeight': 'bold'})
        ]),
        html.Div(id='tabs-content')
    ]),
    
    html.Div(style={'backgroundColor': '#e3f2fd', 'padding': '20px', 'borderRadius': '10px'}, children=[
        html.H3("¬øC√≥mo pueden complementarse?", style={'color': '#0D47A1'}),
        html.P("Estos modelos trabajan mejor juntos que por separado:"),
        html.Ol([
            html.Li("Usar el √Årbol de Decisi√≥n para detectar posibles d√≠as de lluvia"),
            html.Li("Pasar esos d√≠as por el Random Forest para reducir falsas alarmas"),
            html.Li("Tomar acciones basadas en la intersecci√≥n de ambas predicciones")
        ]),
        html.P("Esta estrategia combinada aprovecha lo mejor de ambos modelos.")
    ])
])

@app.callback(
    Output('tabs-content', 'children'),
    Input('model-tabs', 'value')
)
def render_content(tab):
    data = model_data[tab]
    return html.Div([
        dcc.Graph(
            figure=ff.create_annotated_heatmap(
                z=data['conf_matrix'],
                x=['Predicci√≥n: No lluvia', 'Predicci√≥n: Lluvia'],
                y=['Real: No lluvia', 'Real: Lluvia'],
                colorscale=[[0, '#f5f5f5'], [1, data['color']]],
                annotation_text=data['conf_matrix'],
                hoverinfo='z'
            ).update_layout(
                title=f"Matriz de Confusi√≥n - {tab}",
                xaxis_title='Predicci√≥n del Modelo',
                yaxis_title='Realidad'
            )
        ),
        html.Div(style={'display': 'flex', 'justifyContent': 'space-around', 'marginTop': '20px'}, children=[
            html.Div(style={'textAlign': 'center'}, children=[
                html.P("D√≠as correctamente predichos", style={'fontWeight': 'bold'}),
                html.P(f"{data['conf_matrix'][0][0]:,} sin lluvia", style={'color': '#4CAF50'}),
                html.P(f"{data['conf_matrix'][1][1]:,} con lluvia", style={'color': '#4CAF50'})
            ]),
            html.Div(style={'textAlign': 'center'}, children=[
                html.P("Errores importantes", style={'fontWeight': 'bold'}),
                html.P(f"{data['false_alarms']:,} falsas alarmas", style={'color': '#F44336'}),
                html.P(f"{data['missed_rain']:,} lluvias no detectadas", style={'color': '#F44336'})
            ])
        ])
    ])

server = app.server  # üëà ESTO ES CLAVE

if __name__ == '__main__':
    app.run_server(debug=True)
